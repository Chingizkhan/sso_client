package sso_client

import (
	"errors"
	"fmt"
	"github.com/Chingizkhan/sso_client/pkg/api_util"
	"github.com/Chingizkhan/sso_client/pkg/cookies"
	"github.com/Chingizkhan/sso_client/pkg/state"
	"github.com/Chingizkhan/sso_client/pkg/token"
	"github.com/Chingizkhan/sso_client/service/cookie_processor"
	"github.com/Chingizkhan/sso_client/service/sso_service_client"
	"github.com/Chingizkhan/sso_client/usecase/client_credentials"
	"github.com/Chingizkhan/sso_client/usecase/oauth_oidc"
	"golang.org/x/oauth2"
	"log"
	"net/http"
	"time"
)

type (
	Client interface {
		AuthOauth2(next http.Handler) http.Handler
		AuthClientCredentials(next http.Handler) http.Handler
		ProcessCallback(w http.ResponseWriter, r *http.Request) (*oauth2.Token, *sso_service_client.IntrospectResponse, error)
	}

	SsoClient struct {
		cfg               Config
		oidc              OauthOidc
		clientCredentials ClientCredentials
		cookieProcessor   CookieProcessor
	}

	Config struct {
		CookieSecret   string
		CookieLifetime time.Duration
		OauthAddr      string
		Oauth2Config   oauth2.Config
	}
)

func New(config Config) *SsoClient {
	//oauth2Config := oauth2.Config{
	//	ClientID:     "38b36b9d-48a8-40fd-9911-ee4462428c58",
	//	ClientSecret: "mysecret",
	//	RedirectURL:  "http://localhost:8082/callback",
	//	Scopes:       []string{"offline", "users.write", "users.read", "users.edit", "users.delete"},
	//	Endpoint: oauth2.Endpoint{
	//		AuthURL:  "http://localhost:9010/oauth2/auth",
	//		TokenURL: "http://localhost:9010/oauth2/token",
	//	},
	//}
	cookieProcessor := cookie_processor.New(config.CookieLifetime)
	ssoServiceClient := sso_service_client.New(time.Second*15, config.OauthAddr)
	oidc := oauth_oidc.New(cookieProcessor, ssoServiceClient, config.Oauth2Config)
	clientCredentials := client_credentials.New(ssoServiceClient)

	return &SsoClient{
		cfg:               config,
		oidc:              oidc,
		clientCredentials: clientCredentials,
		cookieProcessor:   cookieProcessor,
	}
}

func (c *SsoClient) AuthOauth2(next http.Handler) http.Handler {
	fn := func(w http.ResponseWriter, r *http.Request) {
		// check token exists
		accessToken := token.FromHttpRequest(r)
		log.Println("accessToken", accessToken)
		if accessToken == "" {
			// get cookie and login url
			loginURL, cookie, err := c.oidc.Login()
			if err != nil {
				api_util.RenderErrorResponse(w, "can not show login flow", http.StatusInternalServerError)
				return
			}
			// set cookie to response
			err = cookies.WriteSigned(w, cookie, []byte(c.cfg.CookieSecret))
			if err != nil {
				api_util.RenderErrorResponse(w, "can not write signed cookies", http.StatusInternalServerError)
				return
			}
			// redirect
			http.Redirect(w, r, loginURL, http.StatusTemporaryRedirect)
			return
		}

		// introspect token
		introspectResponse, err := c.oidc.Introspect(r.Context(), accessToken)
		if err != nil {
			api_util.RenderErrorResponse(w, err.Error(), http.StatusUnauthorized)
			return
		}
		log.Printf("introspectResponse: %#v", introspectResponse)
		next.ServeHTTP(w, r)
	}
	return http.HandlerFunc(fn)
}

func (c *SsoClient) AuthClientCredentials(next http.Handler) http.Handler {
	fn := func(w http.ResponseWriter, r *http.Request) {
		// check token exists
		accessToken := token.FromHttpRequest(r)
		if accessToken == "" {
			api_util.RenderErrorResponse(w, "empty token", http.StatusUnauthorized)
			return
		}

		// introspect token
		if err := c.clientCredentials.Introspect(r.Context(), accessToken); err != nil {
			api_util.RenderErrorResponse(w, err.Error(), http.StatusUnauthorized)
			return
		}
		next.ServeHTTP(w, r)
	}
	return http.HandlerFunc(fn)
}

func (c *SsoClient) ProcessCallback(w http.ResponseWriter, r *http.Request) (*oauth2.Token, *sso_service_client.IntrospectResponse, error) {
	var req CallbackRequest
	err := req.Validate(r)
	if err != nil {
		api_util.RenderErrorResponse(w, err.Error(), http.StatusBadRequest)
		return nil, nil, fmt.Errorf("req.Validate: %w", err)
	}
	cookieState, err := cookies.ReadSigned(r, cookie_processor.CookieName, []byte(c.cfg.CookieSecret))
	if err != nil {
		api_util.RenderErrorResponse(w, err.Error(), http.StatusForbidden)
		return nil, nil, fmt.Errorf("cookies.ReadSigned: %w", err)
	}
	if cookieState != r.FormValue("state") {
		api_util.RenderErrorResponse(w, "state is not generated by this Client", http.StatusForbidden)
		return nil, nil, fmt.Errorf("state is not generated by this Client: %w", err)
	}
	log.Println("req.Code:", req.Code)

	tokens, introspectResponse, err := c.oidc.Callback(r.Context(), req.Code)
	if err != nil {
		api_util.RenderErrorResponse(w, err.Error(), http.StatusForbidden)
		return nil, nil, fmt.Errorf("c.oidc.Callback: %w", err)
	}

	log.Println("client_id", introspectResponse.ClientID)
	log.Println("active", introspectResponse.Active)

	processCookies(w, tokens)

	return tokens, introspectResponse, nil
}

func processCookies(w http.ResponseWriter, token *oauth2.Token) {
	cookieAccess := &http.Cookie{
		Name:     "Access-Token",
		Value:    token.AccessToken,
		Secure:   false,
		HttpOnly: false,
		SameSite: http.SameSiteLaxMode,
	}
	cookieRefresh := &http.Cookie{
		Name:     "Refresh-Token",
		Value:    token.RefreshToken,
		Secure:   false,
		HttpOnly: false,
		SameSite: http.SameSiteLaxMode,
	}
	http.SetCookie(w, cookieAccess)
	http.SetCookie(w, cookieRefresh)
}

type (
	CallbackRequest struct {
		Code  string
		State state.State
	}
)

func (r *CallbackRequest) Validate(req *http.Request) error {
	code := req.FormValue("code")
	st := req.FormValue("state")

	if code == "" {
		return errors.New("authorization code is empty")
	}
	if st == "" {
		return errors.New("state is empty")
	}

	stateModel, err := state.New(st)
	if err != nil {
		return err
	}

	r.Code = code
	r.State = stateModel

	return nil
}
